<?php
ini_set('display_errors', '1');
ini_set('display_startup_errors', '1');
error_reporting(E_ALL);

require_once 'Core/Init.php';
require_once 'Core/GPT.php';
require_once 'Core/Images.php';
require_once 'Core/Vars.php';
require_once 'Core/Events.php';
$content = file_get_contents("php://input");
$update = json_decode($content, true);

if (!$update) {
    // –ü–æ–ª—É—á–µ–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    exit;
}
GPT::Init(AI_TOKEN);
Events::Init(DB_PASSWORD,DB_NAME);

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
if (isset($update["message"])) {
     try{
    Vars::initFromUpdate($update);
    $message = $update["message"];
    $chat_id = $message["chat"]["id"];
    $text = isset($message["text"]) ? $message["text"] : "";
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    if (isset($message["voice"])) {
        $voice = $message["voice"];
        $file_id = $voice["file_id"];
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
        $file_info_url = "https://api.telegram.org/bot" . BOT_TOKEN . "/getFile?file_id=" . $file_id;
        $file_info = json_decode(file_get_contents($file_info_url), true);
        
        if ($file_info && isset($file_info["result"]["file_path"])) {
            $file_path = $file_info["result"]["file_path"];
            $voice_file_url = "https://api.telegram.org/file/bot" . BOT_TOKEN . "/" . $file_path;
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            $temp_file = tempnam(sys_get_temp_dir(), 'voice_') . '.ogg';
            file_put_contents($temp_file, file_get_contents($voice_file_url));
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º API –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏
            try {
                $transcription = transcribeAudio($temp_file);
                sendMessage($chat_id, "–î—É–º–∞—é...");
                
                // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
                $history = self::getMessageHistory();
                
                GPT::InitUserData(Events::GetParam('name'), Events::GetParam('about'));
                $response = GPT::GetMessage($transcription, $history);
                
                // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é
                $history = GPT::AddToHistory('user', $transcription, $history);
                $history = GPT::AddToHistory('assistant', $response, $history);
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é
                self::saveMessageHistory($history);
                
                sendMessage($chat_id, $response);
                return;
            } catch (Exception $e) {
                sendMessage($chat_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: " . $e->getMessage());
            }
            
            // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            unlink($temp_file);
        } else {
            sendMessage($chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.");
        }
    }
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
    elseif (strpos($text, "/start") === 0) {
        $photo_url = Images::$start;
        $caption = "–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –î–∂–∞—Ä–≤–∏—Å, —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –≥–æ–ª–æ—Å–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫.\n–ú–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–º–æ—á—å —Ç–µ–±–µ –¥–æ—Å—Ç–∏—á—å —Ü–µ–ª–µ–π –∏ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –¥–µ–Ω—å.\n–î–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è.";
        Events::OnStart();
        Events::SetState("start");
        // –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç"
        $keyboard = [
            'inline_keyboard' => [
                [
                    [
                        'text' => '–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç',
                        'callback_data' => 'start_test'
                    ]
                ]
            ]
        ];
        
        $encodedKeyboard = json_encode($keyboard);
        
        $url = "https://api.telegram.org/bot" . BOT_TOKEN . "/sendPhoto";
        $data = [
            'chat_id' => $chat_id,
            'photo' => $photo_url,
            'caption' => $caption,
            'parse_mode' => 'HTML',
            'reply_markup' => $encodedKeyboard
        ];
        
        $options = [
            'http' => [
                'header' => "Content-Type: application/x-www-form-urlencoded\r\n",
                'method' => 'POST',
                'content' => http_build_query($data)
            ]
        ];
        
        $context = stream_context_create($options);
        file_get_contents($url, false, $context);
    }
    elseif (strpos($text, "/help") === 0) {
        // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –ø–æ–º–æ—â–∏
        $help_text = "–≠—Ç–æ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n/help - –ø–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å\n/clear - –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞";
        sendMessage($chat_id, $help_text);
    } 
    elseif (strpos($text, "/test") === 0) {
        // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –ø–æ–º–æ—â–∏
        $help_text = Vars::getUserId()."/".Vars::getUsername();
        sendMessage($chat_id, $help_text);
    }
    elseif (strpos($text, "/testVoice") === 0) {
        // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –ø–æ–º–æ—â–∏
        sendMessage($chat_id, "test voice");
    }
    elseif (strpos($text, "/support") === 0) {
        // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –ø–æ–º–æ—â–∏
        sendMessage($chat_id, "üõ† –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ Jarvis

–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫ –≤–æ–ø—Ä–æ—Å, –ø—Ä–æ–±–ª–µ–º–∞ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∏–∂–µ.

üìå –ö–∞–∫ –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å?

- –û–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—É –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ.

- –£–∫–∞–∂–∏—Ç–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω—ã —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –∏–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.

- –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –Ω–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –æ—Ç–≤–µ—Ç–∏—Ç –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.

‚ö° –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –±—ã—Å—Ç—Ä–æ! –û–±—ã—á–Ω–æ –æ—Ç–≤–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 12 —á–∞—Å–æ–≤.

–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å Jarvis! ü§ñüíô");
    }
    elseif (strpos($text, "/clear") === 0) {
        // –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        self::clearMessageHistory();
        sendMessage($chat_id, "–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞. –Ø –∑–∞–±—ã–ª –Ω–∞—à –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ä–∞–∑–≥–æ–≤–æ—Ä, –Ω–æ –ø–æ–º–Ω—é –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—Å.");
    }
    elseif (stripos($text, "—Å–∫–∞–∂–∏") !== false) {
        // –ï—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –µ—Å—Ç—å —Å–ª–æ–≤–æ "—Å–∫–∞–∂–∏" (—Ä–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ)
        sendMessage($chat_id, "–Ω–µ —Å–∫–∞–∂—É");
    } else {
        $state = Events::GetState();
        if($state == "start"){
            Events::SetState("aboutMe");
            Events::SetParam("name",$text);
            sendMessage($chat_id,"–ö—Ä–∞—Å–∏–≤–æ–µ –∏–º—è, $text! –Ø –∑–∞–ø–æ–º–Ω–∏–ª). –†–∞—Å—Å–∫–∞–∂–∏ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ, —á–µ–º —Ç—ã –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è –∏ –∫–∞–∫–∞—è —É —Ç–µ–±—è —Å–∞–º–∞—è –≥–ª–æ–±–∞–ª—å–Ω–∞—è —Ü–µ–ª—å.");
            return;
        }
        if($state == "aboutMe"){
            Events::SetState("menu");
            Events::SetParam('about',$text);
            sendMessage($chat_id,"–û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º. –¢—ã –º–æ–∂–µ—à—å —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å —É –º–µ–Ω—è —á—Ç–æ —É–≥–æ–¥–Ω–æ, –∞ —è —Ç–µ–±–µ —Å —Ä–∞–¥–æ—Å—Ç—å—é –æ—Ç–≤–µ—á—É. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Ç—ã –º–æ–∂–µ—à—å —É–∑–Ω–∞—Ç—å –≤–≤–µ–¥—è –∫–æ–º–∞–Ω–¥—É /help.");
            return;
        }
        
        sendMessage($chat_id, "–î—É–º–∞—é....");
        sendMessage($chat_id, "0");
        // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
            sendMessage($chat_id, "00");
        $history = self::getMessageHistory();
        sendMessage($chat_id, "1");
        GPT::InitUserData(Events::GetParam('name'), Events::GetParam('about'));
        sendMessage($chat_id, "2");
        $response = GPT::GetMessage($text, $history);
        sendMessage($chat_id, "3");
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é
        $history = GPT::AddToHistory('user', $text, $history);
        sendMessage($chat_id, "4");
        $history = GPT::AddToHistory('assistant', $response, $history);
        sendMessage($chat_id, "5");
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é
        self::saveMessageHistory($history);
        sendMessage($chat_id, "6");
        sendMessage($chat_id, $response);
    }
    }catch(Exception $e){
            sendMessage($chat_id, $e);
        }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç inline –∫–Ω–æ–ø–æ–∫
if (isset($update["callback_query"])) {
    Vars::initFromUpdate($update);
    $callback_query = $update["callback_query"];
    $chat_id = $callback_query["message"]["chat"]["id"];
    $data = $callback_query["data"];
    
    if ($data == 'start_test') {
        sendMessage($chat_id, "–ü—Ä–∏—Å—Ç—É–ø–∏–º. –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?");
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
function getMessageHistory(): array {
    $messagesJson = Events::GetParam('messages');
    if ($messagesJson) {
        $history = json_decode($messagesJson, true);
        return is_array($history) ? $history : [];
    }
    return [];
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
function saveMessageHistory(array $history): void {
    Events::SetParam('messages', json_encode($history));
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
function clearMessageHistory(): void {
    Events::SetParam('messages', json_encode([]));
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –∞—É–¥–∏–æ
function transcribeAudio($audio_file_path) {
    $api_key = AI_TOKEN;
    
    $url = 'https://api.aitunnel.ru/v1/audio/transcriptions';
    
    $headers = [
        'Authorization: Bearer ' . $api_key,
    ];
    
    $post_fields = [
        'file' => new CURLFile($audio_file_path),
        'model' => 'whisper-1',
        'response_format' => 'text'
    ];
    
    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $url);
    curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
    curl_setopt($ch, CURLOPT_POST, 1);
    curl_setopt($ch, CURLOPT_POSTFIELDS, $post_fields);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    
    $response = curl_exec($ch);
    $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
    
    if (curl_errno($ch)) {
        throw new Exception('–û—à–∏–±–∫–∞ cURL: ' . curl_error($ch));
    }
    
    curl_close($ch);
    
    if ($http_code != 200) {
        throw new Exception('–û—à–∏–±–∫–∞ API: ' . $response);
    }
    
    return $response;
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
function sendMessage($chat_id, $text) {
    $url = "https://api.telegram.org/bot" . BOT_TOKEN . "/sendMessage";
    $data = [
        'chat_id' => $chat_id,
        'text' => $text,
        'parse_mode' => 'HTML'
    ];
    
    $options = [
        'http' => [
            'header' => "Content-Type: application/x-www-form-urlencoded\r\n",
            'method' => 'POST',
            'content' => http_build_query($data)
        ]
    ];
    
    $context = stream_context_create($options);
    file_get_contents($url, false, $context);
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
function sendPhoto($chat_id, $photo_url, $caption = "") {
    $url = "https://api.telegram.org/bot" . BOT_TOKEN . "/sendPhoto";
    $data = [
        'chat_id' => $chat_id,
        'photo' => $photo_url,
        'caption' => $caption,
        'parse_mode' => 'HTML'
    ];
    
    $options = [
        'http' => [
            'header' => "Content-Type: application/x-www-form-urlencoded\r\n",
            'method' => 'POST',
            'content' => http_build_query($data)
        ]
    ];
    
    $context = stream_context_create($options);
    file_get_contents($url, false, $context);
}
?>